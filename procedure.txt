<procedure> (<input>,<input>,...)

//////////////////////////

def sub_num(num1,num2):
    return num1 + num2
print sub_num(5,7)

/////////////////////////

def rest_string(s):
    return s[1:] # 'udacity'
print rest_string ('audacity')

///////////////////////

def sum(a,b):
    print 'a is', a
    a = a + b
    print ' a is', a
print sum(2,123)

///////////////////////

def sum ( a,b ):
    c=a+b
    return c
s='hello'
d='ali'
print sum (s,d)

///////////////////////

a=6
def s_fun():
print 'GLO:'+str(a)

///////////////////////

def some_fun(para1,para2):
    print para1
    print para2
a = 'hello world'
b = 2
some_fun ( a, b)

///////////////////////

# Define a procedure, udacify, that takes as
# input a string, and returns a string that
# is an uppercase 'U' followed by the input string.
# for example, when you enter

# print udacify('dacians')

# the output should be the string 'Udacians'

def udacify(s):
 return  'U'+ s

print udacify('dacians')

# Remove the hash, #, from infront of print to test your code.


#>>> Udacians
def udacify(a):
  return 'U'+ a
    
    
print udacify('turn')
#>>> Uturn
def udacify(b):
       return 'U'+ b
  
print udacify('boat')
#>>> Uboat

////////////////////////

# Define a procedure, replace_spy,
# that takes as its input a list of
# three numbers, and modifies the
# value of the third element in the
# input list to be one more than its
# previous value.

spy = [0,0,7]

def replace_spy(p):
    p[2]=p[2]+1

# In the test below, the first line calls your 
# procedure which will change spy, and the 
# second checks you have changed it.
# Uncomment the top two lines below.

replace_spy(spy)
print spy
#>>> [0,0,8]

///////////////////////////

# Credit goes to Websten from forums
#
# Use Dave's suggestions to finish your daysBetweenDates
# procedure. It will need to take into account leap years
# in addition to the correct number of days in each month.

def nextDay(year, month, day):
    """Simple version: assume every month has 30 days"""
    if day < 30:
        return year, month, day + 1
    else:
        if month == 12:
            return year + 1, 1, 1
        else:
            return year, month + 1, 1
        
def dateIsBefore(year1, month1, day1, year2, month2, day2):
    """Returns True if year1-month1-day1 is before year2-month2-day2. Otherwise, returns False."""
    if year1 < year2:
        return True
    if year1 == year2:
        if month1 < month2:
            return True
        if month1 == month2:
            return day1 < day2
    return False        

def daysBetweenDates(year1, month1, day1, year2, month2, day2):
    """Returns the number of days between year1/month1/day1
       and year2/month2/day2. Assumes inputs are valid dates
       in Gregorian calendar."""
    # program defensively! Add an assertion if the input is not valid!
    assert not dateIsBefore(year2, month2, day2, year1, month1, day1)
    days = 0
    while dateIsBefore(year1, month1, day1, year2, month2, day2):
        year1, month1, day1 = nextDay(year1, month1, day1)
        days += 1
    return days

def test():
    test_cases = [((2012,1,1,2012,2,28), 58), 
                  ((2012,1,1,2012,3,1), 60),
                  ((2011,6,30,2012,6,30), 366),
                  ((2011,1,1,2012,8,8), 585 ),
                  ((1900,1,1,1999,12,31), 36523)]
    
    for (args, answer) in test_cases:
        result = daysBetweenDates(*args)
        if result != answer:
            print "Test with data:", args, "failed"
        else:
            print "Test case passed!"

test()

/////////////////////////////////

# Define a procedure, product_list,
# that takes as input a list of numbers,
# and returns a number that is
# the result of multiplying all
# those numbers together.


def product_list(list_of_numbers):
    total=1
    for i in list_of_numbers:
        total=total*i
    return total  
    
print product_list([9])
#>>> 9

print product_list([1,2,3,4])
#>>> 24

print product_list([])
#>>> 1

////////////////////////////

# Define a procedure, greatest,
# that takes as input a list
# of positive numbers, and
# returns the greatest number
# in that list. If the input
# list is empty, the output
# should be 0.

def greatest(p):
    for i in p:
        return max(p)
    if p != 0:
        return 0

print greatest([4,23,1])
#>>> 23
print greatest([])
#>>> 0

    
def greatest(p):
    big=0
    for i in p:
        if i > big:
            big=i
        return big and return 0

print greatest([4,23,1])
#>>> 23
print greatest([])
#>>> 0

//////////////////////////////

# Here's another chance to practice your for loop skills. Write code for the 
# function word_in_pos (meaning word in parts_of_speech), which takes in a string 
# word and a list parts_of_speech as inputs. If there is a word in parts_of_speech
# that is a substring of the variable word, then return that word in parts_of_speech, 
# else return None.


def word_in_pos(word, parts_of_speech):
    for e in parts_of_speech:
        if e in word:
            return e
    return None
   

test_cases = ["NOUN", "FALSE", "<<@PERSON><", "PLURALNOUN"]
parts_of_speech = ["PERSON", "PLURALNOUN", "NOUN"]

print word_in_pos(test_cases[0], parts_of_speech)
print word_in_pos(test_cases[1], parts_of_speech)
print word_in_pos(test_cases[2], parts_of_speech)
print word_in_pos(test_cases[3], parts_of_speech)

////////////////////////////////

# Write code for the function play_game, which takes in as inputs parts_of_speech
# (a list of acceptable replacement words) and ml_string (a string that 
# can contain replacement words that are found in parts_of_speech). Your play_game
# function should return the joined list replaced, which will have the same structure
# as ml_string, only that replacement words are swapped out with "corgi", since this
# program cannot replace those words with user input. 

parts_of_speech  = ["PLACE", "PERSON", "PLURALNOUN", "NOUN"]

test_string = """This is PLACE, no NOUN named PERSON, We have so many PLURALNOUN around here."""

def word_in_pos(word, parts_of_speech):
    for pos in parts_of_speech:
        if pos in word:
            return pos
    return None
        
def play_game(ml_string, parts_of_speech):    
    replaced = []
    s = Raw_input("Type in a")
    ml_string = ml_string.split()
    for word in ml_string:
        rep=word_in_pos(word, parts_of_speech)
        if rep != None:
            user-input = raw-input('type in a'+rep)
            word = word.replace(rep,user-input)
            word = word.replace(rep,s)
            # word = word.replace(rep,'corgi')
            replaced.append(word)
        else:
            replaced.append(word)
    replaced=' '.join(replaced) # دالة لدمج الكلمات
    return replaced
    
print play_game(test_string, parts_of_speech)       

//////////////////////////////



